//Given a linked list, find and return the length of the given linked list recursively.

int length(Node *head) {
	if(head==NULL){
		return 0;
	}
	if(head->next==NULL){
		return 1;
	}
	int a = length(head->next);
	return 1+a;
}

//You have been given an array 'A' of length 'N'. Insert an element using recursion

Node* insertNode(Node *head, int i, int data) {
	if(head==NULL){
		return head;
	}
	if(i==0){
		Node* newnode = new Node(data);
		newnode->next = head;
		return newnode;
	}
	if(i==1){
		Node* newnode = new Node(data);
		newnode->next = head->next;
		head->next = newnode;
		return head;
	}
	insertNode(head->next, i-1, data);
	return head;
}

//Given a singly linked list of integers and position 'i', delete the node present at the 'i-th' position in the linked list recursively.
Node *deleteNodeRec(Node *start, int k) {
  // If invalid k
  if (k < 0)
    return start;

  // If linked list is empty
  if (start == NULL)
    return NULL;

  // Base case (start needs to be deleted)
  if (k == 0) {
    Node *res = start;
	start = start->next;
    delete(res);
    return start;
  }

  start->next = deleteNodeRec(start->next, k - 1);
  return start;
}

//You have been given a singly linked list of integers. Write a function that returns the index/position of integer data denoted by 'N' (if it exists). Return -1 otherwise.

int findNode(Node *head, int n){
    Node* temp = head;
    int count=0;
    while(temp!=NULL){
        if(temp->data==n){
            return count;
        }
        temp = temp->next;
        count++;
    }
    return -1;
}

//You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list.

Node *appendLastNToFirst(Node *head, int n)
{
    if(head==NULL){
		return NULL;
	}
	if(n==0){
		return head;
	}
	Node* temp = head;
	int count=0;
	while(temp!=NULL){
		temp = temp->next;
		count++;
	}

	Node* ptr = head;
	while(ptr->next!=NULL){
		ptr = ptr->next;
	}
	for(int i=0;i<count-n;i++){
		Node* newnode = new Node(head->data);
		ptr->next = newnode;
		Node* a = head;
		head = head->next;
		delete(a);
		ptr = ptr->next;
	}
	return head;
	
}

//You have been given a singly linked list of integers where the elements are sorted in ascending order. Write a function that removes the consecutive duplicate values such that the given list only contains unique elements and returns the head to the updated list.

Node *removeDuplicates(Node *head)
{
	if(head==NULL){
		return NULL;
	}
	Node* temp = head;
	while(temp->next!=NULL){
		Node* ptr = temp->next;
		if(temp->data == ptr->data){
			temp->next = ptr->next;
			delete(ptr);
			continue;
		}
		temp = temp->next;		
	}
	return head;
}

//You have been given a singly linked list of integers. Write a function to print the list in a reverse order.To explain it further, you need to start printing the data from the tail and move towards the head of the list, printing the head data at the end.

void printReverse(Node *head)
{
    if(head==NULL){
		return;
	}
	printReverse(head->next);
	cout << head->data << " ";
}

//You have been given a head to a singly linked list of integers. Write a function check to whether the list given is a 'Palindrome' or not.

#include <bits/stdc++.h>
using namespace std;

bool isPalindrome(Node* head)
{
 
    // Temp pointer
    Node* slow = head;
 
    // Declare a stack
    stack<int> s;
 
    // Push all elements of the list
    // to the stack
    while (slow != NULL) {
        s.push(slow->data);
 
        // Move ahead
        slow = slow->next;
    }
 
    // Iterate in the list again and
    // check by popping from the stack
    while (head != NULL) {
 
        // Get the top most element
        int i = s.top();
 
        // Pop the element
        s.pop();
 
        // Check if data is not
        // same as popped element
        if (head->data != i) {
            return false;
        }
 
        // Move ahead
        head = head->next;
    }
 
    return true;
}


